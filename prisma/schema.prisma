datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["native", "rhel-openssl-3.0.x", "rhel-openssl-1.0.x", "debian-openssl-3.0.x"]
}

// run 'prisma generate' to re-generate Prisma Client to ensure the code
// inside node_modules/.prisma/client gets updated after updating data model

model User {
  id             String       @id @default(cuid())
  authProviderId String       @unique
  password       String?
  recipes        Recipe[]
  mealPlan       MealPlan     @relation(fields: [mealPlanId], references: [id], onDelete: Cascade)
  mealPlanId     String
  Ingredient     Ingredient[]
}

model IngredientType {
  id          String       @id @default(cuid())
  name        String
  ingredients Ingredient[]
}

model Ingredient {
  id                       String                     @id @default(cuid())
  name                     String
  ingredientType           IngredientType?            @relation(fields: [ingredientTypeId], references: [id], onDelete: SetNull)
  ingredientTypeId         String?
  RecipeIngredientQuantity RecipeIngredientQuantity[]
  user                     User?                      @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId                   String?
}

model RecipeIngredientQuantity {
  unit         String
  amount       Decimal
  ingredient   Ingredient @relation(fields: [ingredientId], references: [id], onDelete: Cascade)
  ingredientId String
  recipe       Recipe     @relation(fields: [recipeId], references: [id], onDelete: Cascade)
  recipeId     String

  @@id([ingredientId, recipeId])
}

model Recipe {
  id                   String                     @id @default(cuid())
  name                 String
  imageUrl             String?
  category             RecipeCategory?            @relation(fields: [categoryId], references: [id])
  categoryId           String?
  ingredientQuantities RecipeIngredientQuantity[]
  user                 User?                      @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId               String?
  content              String?
  mealPlanEntries      MealPlanEntry[]
  createdAt            DateTime                   @default(now())
  updatedAt            DateTime                   @default(now()) @updatedAt
}

model RecipeCategory {
  id     String   @id @default(cuid())
  name   String   @unique
  recipe Recipe[]
}

model GroceryList {
  id   String @id @default(cuid())
  name String
}

model MealPlan {
  id       String          @id @default(cuid())
  schedule MealPlanEntry[]
  users    User[]
}

model MealPlanEntry {
  id         String   @id @default(cuid())
  date       DateTime @db.Date
  mealType   MealType
  mealPlan   MealPlan @relation(fields: [mealPlanId], references: [id], onDelete: Cascade)
  mealPlanId String
  recipe     Recipe   @relation(fields: [recipeId], references: [id], onDelete: Cascade)
  recipeId   String
}

enum MealType {
  BREAKFAST
  LUNCH
  DINNER
}
